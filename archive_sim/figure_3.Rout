
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #------------------------------
> # Self-contained R code
> # to reproduce simulations
> # in Figure 3 of the Cross Validation 
> # Manuscript:
> # Explore Stability of the Standard
> # CV Method
> #------------------------------
> 
> # functions
> library(survival)
> library(ncvreg)

Attaching package: ‘ncvreg’

The following object is masked from ‘package:survival’:

    heart

> 
> generatebeta <- function(p,nbeta,c = 1){
+   pos <- rep(c, ceiling(nbeta/2))
+   neg <- rep(-c, floor(nbeta/2))
+   beta <- c(pos,neg,rep(0,p-nbeta))
+ }
> 
> genSurvData <- function(n = 100, beta = c(1,-1),cpct = 0.70,sd = 1,h = 1 # 70% means 70% of the data are censored; 30% are observed
+ ){
+   p <- length(beta)
+   ## Generate column vector of coefficients
+   beta <- matrix(beta, ncol = 1)
+   x <- matrix(rnorm(n*p, sd = sd),n,p)
+   #standardize x first
+   x <- ncvreg::std(x)
+   hazard <- h*exp(x %*% beta)
+   ## Calculate survival times
+   time <- rexp(n, hazard)
+   
+   ## observations are censored
+   id <- sample(n,round(cpct * n))
+   event <- rep(1,n)
+   event[id] <- 0
+   
+   y <- Surv(time = time, event = event)
+   return(list(x=x,y=y,beta = beta))
+ }
> 
> 
> 
> # increase number of folds
> #----------------------------------------------------------------------------------------
> 
> n <- 120
> p <- 1000
> cpct <- 0.5
> nbeta <- 10
> beta <- generatebeta(p,nbeta = nbeta ,c = 0.5)
> N <- 200
> Nfold <- c(10,12,15,20,30,60)
> 
> # initiation
> gp <- array(NA,c(2,N,length(Nfold)))
> ug <- array(NA,c(2,N,length(Nfold)))
> ncv <- array(NA,c(2,N,length(Nfold)))
> dvr <- array(NA,c(2,N,length(Nfold)))
> oracle.mse <- matrix(NA, nrow = N, ncol = length(Nfold))
> foldid <- numeric(n)
> 
> for(i in 1:N){
+   set.seed(666 + i)
+   
+   for (j in 1:length(Nfold)){
+     nfold <- Nfold[j]
+     # generate data
+     data <- genSurvData(n=n, beta = beta, cpct = cpct, sd = 1, h = 1)
+     data.test <- genSurvData(n=1000 , beta = beta, cpct = 0, sd = 1, h = 1)
+     nevent <- sum(data$y[,2])
+     sde <- sqrt(.Machine$double.eps)
+     foldid[data$y[,2] == 1] <-  ceiling(sample(1:nevent)/(nevent + sde) * nfold)
+     foldid[data$y[,2] == 0] <-  ceiling(sample(1:(n-nevent))/(n - nevent + sde) * nfold)
+     
+     # initial fit
+     fit <- ncvsurv(data$x, data$y,penalty = "lasso")
+     lambda <- fit$lambda
+     beta_hat <- fit$beta
+     norm <- apply(beta_hat,2,function(x){mean((x-beta)^2)})
+     
+     #oracle model
+     data.oracle <- data.frame(data$y, data$x[,1:nbeta])
+     fit.oracle <- coxph(data.y ~ ., data = data.oracle)
+     oracle.mse[i,j] <- sum((fit.oracle$coef - beta[1:nbeta])^2)/p
+     
+     # cross validation fit
+     eta.cv <- matrix(nrow = n, ncol = length(lambda))
+     l_diff <- matrix(nrow = nfold , ncol = length(lambda))
+     l_test <- matrix(nrow = nfold, ncol = length(lambda))
+     
+     ind <- order(data$y[,1])
+     d <- data$y[ind,2]
+     
+     for(f in 1:nfold){
+       ifold <- foldid == f
+       cvfit <- ncvsurv(data$x[!ifold,], data$y[!ifold,],penalty = "lasso", lambda = lambda)
+       cvlambda <- cvfit$lambda
+       beta_train <- cvfit$beta
+       
+       # linear predictors
+       eta.cv[ifold,lambda%in%cvlambda] <- predict(cvfit,X = data$x[ifold,], type = "link")
+       
+       # grouped
+       eta.full.ordered <- apply(beta_train,2,function(b){
+         data$x %*% b})[ind,]
+       r.full.ordered <- apply(eta.full.ordered, 2, function(x) rev(cumsum(rev(exp(x)))))
+       l_full <- -2 * (crossprod(d, eta.full.ordered) - crossprod(d, log(r.full.ordered)))
+       
+       ind_train <- order(data$y[!ifold,1])
+       d_train <- data$y[!ifold,2][ind_train]
+       eta.train.ordered <- apply(beta_train,2,function(b){
+         data$x[!ifold,] %*% b})[ind_train,]
+       r.train.ordered <- apply(eta.train.ordered, 2, function(x) rev(cumsum(rev(exp(x)))))
+       l_train <- -2 * (crossprod(d_train, eta.train.ordered) - crossprod(d_train, log(r.train.ordered)))
+       
+       l_diff[f,lambda%in%cvlambda] <- l_full - l_train
+       
+       # ungrouped
+       ind_test <- order(data$y[ifold,1])
+       d_test <- data$y[ifold,2][ind_test]
+       eta.test.ordered <- apply(beta_train,2,function(b){
+         e <- data$x[ifold,] %*% b})[ind_test,]
+       r.test.ordered <- apply(eta.test.ordered, 2, function(x) rev(cumsum(rev(exp(x)))))
+       l_test[f,lambda%in%cvlambda] <- -2 * (crossprod(d_test, eta.test.ordered) - crossprod(d_test, log(r.test.ordered)))
+     }
+     
+     # grouped
+     val_GP <- na.omit(apply(l_diff,2,mean))
+     
+     # ungrouped
+     val_UG <- na.omit(apply(l_test,2,mean))
+     
+     # linear predictor
+     eta.cv <- eta.cv[,apply(eta.cv,2,function(x){sum(is.na(x)) == 0})]
+     
+     eta.cv.ordered <- eta.cv[ind,,drop = FALSE]
+     r <- apply(eta.cv.ordered, 2, function(x) rev(cumsum(rev(exp(x)))))
+     val_LP <- -2 * (crossprod(d, eta.cv.ordered) - crossprod(d, log(r)))
+     
+     # deviance residual
+     KM <- survfit(data$y~1)
+     BH_NA <- cumsum(KM$n.event/KM$n.risk)
+     w.cv <- exp(eta.cv[ind, , drop = FALSE])
+     val_NA <- apply(w.cv, 2, function(x){ 
+       M <- d - BH_NA*x
+       dev <- sign(M) * sqrt(-2 * (M + ifelse(d == 0, 0, d * 
+                                                log(d - M))))
+       sum(dev^2)})
+     
+     ###########
+     # lambdas #
+     ###########
+     gp[1,i,j]<- lambda[which.min(val_GP)]
+     ug[1,i,j]<- lambda[which.min(val_UG)]
+     ncv[1,i,j]<- lambda[which.min(val_LP)]
+     dvr[1,i,j]<- lambda[which.min(val_NA)]
+     
+     ########
+     # mses #
+     ########
+     gp[2,i,j] <- norm[gp[1,i,j] == lambda]
+     ug[2,i,j] <- norm[ug[1,i,j] == lambda]
+     ncv[2,i,j] <- norm[ncv[1,i,j] == lambda]
+     dvr[2,i,j] <- norm[dvr[1,i,j] == lambda]
+   
+     print(c(i,j))
+   }
+ }

There were 50 or more warnings (use warnings() to see the first 50)
> 
> save(gp,ug,ncv,dvr, file = "scenario_3_1.RData")
> 
> results <- list()
> for(i in 1:2){
+   results[[i]] <- rbind(
+     apply(gp[i,,],2,mean),
+     apply(ncv[i,,],2,mean),
+     apply(ug[i,,],2,mean),
+     apply(dvr[i,,],2,mean)
+   )
+   rownames(results[[i]]) <- c("VVH","LP","ST","DVR")
+   colnames(results[[i]]) <- Nfold
+ }
> 
> for(i in 3:4){
+   results[[i]] <- rbind(
+     apply(gp[i-2,,],2,sd),
+     apply(ncv[i-2,,],2,sd),
+     apply(ug[i-2,,],2,sd),
+     apply(dvr[i-2,,],2,sd)
+   )
+   rownames(results[[i]]) <- c("VVH","LP","ST","DVR")
+   colnames(results[[i]]) <- Nfold
+ }
> 
> names(results) <- c("lambda",
+                     "MSE",
+                     "lambda_sd",
+                     "MSE_sd")
> results$lambda
           10        12        15        20        30        60
VVH 0.1757055 0.1736282 0.1731709 0.1694675 0.1618713 0.1606836
LP  0.1615019 0.1566077 0.1605235 0.1544326 0.1409580 0.1428775
ST  0.1583171 0.1532714 0.1547453 0.1504012 0.1324373 0.1279404
DVR 0.1658924 0.1633798 0.1643516 0.1581531 0.1475092 0.1490562
> results$MSE
             10          12          15          20          30          60
VVH 0.002398989 0.002396560 0.002386803 0.002402390 0.002370706 0.002374111
LP  0.002380241 0.002387684 0.002368240 0.002383825 0.002373099 0.002382960
ST  0.002379071 0.002404184 0.002380661 0.002440179 0.002471043 0.002665021
DVR 0.002385436 0.002398976 0.002371881 0.002379309 0.002359605 0.002372525
> results$lambda_sd
            10         12         15         20         30         60
VVH 0.03275766 0.03342338 0.03449332 0.03310120 0.03688604 0.03567275
LP  0.04159303 0.04473372 0.04430866 0.04136571 0.04672347 0.04440400
ST  0.04434127 0.04616206 0.04803838 0.04663361 0.05271351 0.05240668
DVR 0.03845992 0.04052590 0.04120442 0.03880469 0.04292469 0.04045357
> results$MSE_sd
              10           12           15           20           30
VVH 0.0001638240 0.0001734126 0.0001683678 0.0001646371 0.0001887638
LP  0.0002042066 0.0002480549 0.0001984454 0.0002001070 0.0002367798
ST  0.0001985249 0.0002443544 0.0002286665 0.0004319771 0.0004741662
DVR 0.0001851034 0.0002058677 0.0001833899 0.0001911692 0.0002190188
              60
VVH 0.0001620498
LP  0.0002088163
ST  0.0016217177
DVR 0.0001826527
> 
> 
> proc.time()
     user    system   elapsed 
14843.508    12.381 14862.852 
