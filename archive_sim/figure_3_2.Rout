
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #------------------------------
> # Self-contained R code
> # to reproduce simulations
> # in Figure 3 of the Cross Validation 
> # Manuscript:
> # Explore Stability of the Standard
> # CV Method
> # fixed number of events
> # varying censoring %
> #------------------------------
> 
> # functions
> library(survival)
> library(ncvreg)

Attaching package: ‘ncvreg’

The following object is masked from ‘package:survival’:

    heart

> 
> generatebeta <- function(p,nbeta,c = 1){
+   pos <- rep(c, ceiling(nbeta/2))
+   neg <- rep(-c, floor(nbeta/2))
+   beta <- c(pos,neg,rep(0,p-nbeta))
+ }
> 
> genSurvData <- function(n = 100, beta = c(1,-1),cpct = 0.70,sd = 1,h = 1 # 70% means 70% of the data are censored; 30% are observed
+ ){
+   p <- length(beta)
+   ## Generate column vector of coefficients
+   beta <- matrix(beta, ncol = 1)
+   x <- matrix(rnorm(n*p, sd = sd),n,p)
+   #standardize x first
+   x <- ncvreg::std(x)
+   hazard <- h*exp(x %*% beta)
+   ## Calculate survival times
+   time <- rexp(n, hazard)
+   
+   ## observations are censored
+   id <- sample(n,round(cpct * n))
+   event <- rep(1,n)
+   event[id] <- 0
+   
+   y <- Surv(time = time, event = event)
+   return(list(x=x,y=y,beta = beta))
+ }
> 
> 
> 
> # increase number of folds
> #----------------------------------------------------------------------------------------
> 
> n_vary <- c(75,80,120,240,600)
> cpct <- c(0.2,0.25,0.5,0.75,0.9)
> p <- 1000
> nbeta <- 10
> beta <- generatebeta(p,nbeta = nbeta ,c = 0.7)
> N <- 200
> nfold <- 20
> 
> # initiation
> gp <- array(NA,c(2,N,length(n_vary)))
> ug <- array(NA,c(2,N,length(n_vary)))
> ncv <- array(NA,c(2,N,length(n_vary)))
> dvr <- array(NA,c(2,N,length(n_vary)))
> oracle.mse <- matrix(NA, nrow = N, ncol = length(n_vary))
> 
> for(i in 1:N){
+   set.seed(666 + i)
+   
+   for (j in 1:length(n_vary)){
+     n <- n_vary[j]
+     
+     foldid <- numeric(n)
+     
+     # generate data
+     data <- genSurvData(n=n, beta = beta, cpct = cpct[j], sd = 1, h = 1)
+     data.test <- genSurvData(n=1000 , beta = beta, cpct = 0, sd = 1, h = 1)
+     nevent <- sum(data$y[,2])
+     sde <- sqrt(.Machine$double.eps)
+     foldid[data$y[,2] == 1] <-  ceiling(sample(1:nevent)/(nevent + sde) * nfold)
+     foldid[data$y[,2] == 0] <-  ceiling(sample(1:(n-nevent))/(n - nevent + sde) * nfold)
+     
+     
+   # initial fit
+     fit <- ncvsurv(data$x, data$y,penalty = "lasso")
+     lambda <- fit$lambda
+     beta_hat <- fit$beta
+     norm <- apply(beta_hat,2,function(x){mean((x-beta)^2)})
+     
+     #oracle model
+     data.oracle <- data.frame(data$y, data$x[,1:nbeta])
+     fit.oracle <- coxph(data.y ~ ., data = data.oracle)
+     oracle.mse[i,j] <- sum((fit.oracle$coef - beta[1:nbeta])^2)/p
+     
+     # cross validation fit
+     eta.cv <- matrix(nrow = n, ncol = length(lambda))
+     l_diff <- matrix(nrow = nfold , ncol = length(lambda))
+     l_test <- matrix(nrow = nfold, ncol = length(lambda))
+     
+     ind <- order(data$y[,1])
+     d <- data$y[ind,2]
+     
+     for(f in 1:nfold){
+       ifold <- foldid == f
+       cvfit <- ncvsurv(data$x[!ifold,], data$y[!ifold,],penalty = "lasso", lambda = lambda)
+       cvlambda <- cvfit$lambda
+       beta_train <- cvfit$beta
+       
+       # linear predictors
+       eta.cv[ifold,lambda%in%cvlambda] <- predict(cvfit,X = data$x[ifold,], type = "link")
+       
+       # grouped
+       eta.full.ordered <- apply(beta_train,2,function(b){
+         data$x %*% b})[ind,]
+       r.full.ordered <- apply(eta.full.ordered, 2, function(x) rev(cumsum(rev(exp(x)))))
+       l_full <- -2 * (crossprod(d, eta.full.ordered) - crossprod(d, log(r.full.ordered)))
+       
+       ind_train <- order(data$y[!ifold,1])
+       d_train <- data$y[!ifold,2][ind_train]
+       eta.train.ordered <- apply(beta_train,2,function(b){
+         data$x[!ifold,] %*% b})[ind_train,]
+       r.train.ordered <- apply(eta.train.ordered, 2, function(x) rev(cumsum(rev(exp(x)))))
+       l_train <- -2 * (crossprod(d_train, eta.train.ordered) - crossprod(d_train, log(r.train.ordered)))
+       
+       l_diff[f,lambda%in%cvlambda] <- l_full - l_train
+       
+       # ungrouped
+       ind_test <- order(data$y[ifold,1])
+       d_test <- data$y[ifold,2][ind_test]
+       eta.test.ordered <- apply(beta_train,2,function(b){
+         e <- data$x[ifold,] %*% b})[ind_test,]
+       r.test.ordered <- apply(eta.test.ordered, 2, function(x) rev(cumsum(rev(exp(x)))))
+       l_test[f,lambda%in%cvlambda] <- -2 * (crossprod(d_test, eta.test.ordered) - crossprod(d_test, log(r.test.ordered)))
+     }
+     
+     # grouped
+     val_GP <- na.omit(apply(l_diff,2,mean))
+     
+     # ungrouped
+     val_UG <- na.omit(apply(l_test,2,mean))
+     
+     # linear predictor
+     eta.cv <- eta.cv[,apply(eta.cv,2,function(x){sum(is.na(x)) == 0})]
+     
+     eta.cv.ordered <- eta.cv[ind,,drop = FALSE]
+     r <- apply(eta.cv.ordered, 2, function(x) rev(cumsum(rev(exp(x)))))
+     val_LP <- -2 * (crossprod(d, eta.cv.ordered) - crossprod(d, log(r)))
+     
+     # deviance residual
+     KM <- survfit(data$y~1)
+     BH_NA <- cumsum(KM$n.event/KM$n.risk)
+     w.cv <- exp(eta.cv[ind, , drop = FALSE])
+     val_NA <- apply(w.cv, 2, function(x){ 
+       M <- d - BH_NA*x
+       dev <- sign(M) * sqrt(-2 * (M + ifelse(d == 0, 0, d * 
+                                                log(d - M))))
+       sum(dev^2)})
+     
+     ###########
+     # lambdas #
+     ###########
+     gp[1,i,j]<- lambda[which.min(val_GP)]
+     ug[1,i,j]<- lambda[which.min(val_UG)]
+     ncv[1,i,j]<- lambda[which.min(val_LP)]
+     dvr[1,i,j]<- lambda[which.min(val_NA)]
+     
+     ########
+     # mses #
+     ########
+     gp[2,i,j] <- norm[gp[1,i,j] == lambda]
+     ug[2,i,j] <- norm[ug[1,i,j] == lambda]
+     ncv[2,i,j] <- norm[ncv[1,i,j] == lambda]
+     dvr[2,i,j] <- norm[dvr[1,i,j] == lambda]
+   
+     print(c(i,j))
+   }
+ }

There were 50 or more warnings (use warnings() to see the first 50)
> 
> save(gp,ug,ncv,dvr, file = "scenario_3_2.RData")
> 
> results <- list()
> for(i in 1:2){
+   results[[i]] <- rbind(
+     apply(gp[i,,],2,mean),
+     apply(ncv[i,,],2,mean),
+     apply(ug[i,,],2,mean),
+     apply(dvr[i,,],2,mean)
+   )
+   rownames(results[[i]]) <- c("VVH","LP","ST","DVR")
+   colnames(results[[i]]) <- cpct
+ }
> 
> for(i in 3:4){
+   results[[i]] <- rbind(
+     apply(gp[i-2,,],2,sd),
+     apply(ncv[i-2,,],2,sd),
+     apply(ug[i-2,,],2,sd),
+     apply(dvr[i-2,,],2,sd)
+   )
+   rownames(results[[i]]) <- c("VVH","LP","ST","DVR")
+   colnames(results[[i]]) <- cpct
+ }
> 
> names(results) <- c("lambda",
+                     "MSE",
+                     "lambda_sd",
+                     "MSE_sd")
> results$lambda
          0.2      0.25       0.5       0.75        0.9
VVH 0.2608858 0.2407338 0.1586368 0.07673383 0.03007372
LP  0.2164282 0.2047641 0.1368783 0.07279178 0.02979155
ST  0.2013993 0.1868837 0.1282140 0.06818469 0.02845127
DVR 0.2268178 0.2161398 0.1431723 0.07616713 0.03129310
> results$MSE
            0.2        0.25         0.5        0.75         0.9
VVH 0.004620135 0.004623710 0.004538109 0.004435271 0.004360592
LP  0.004433665 0.004476146 0.004341493 0.004372315 0.004339535
ST  0.004385688 0.004450975 0.004323146 0.004308181 0.004285215
DVR 0.004476900 0.004520138 0.004392648 0.004441877 0.004427837
> results$lambda_sd
           0.2       0.25        0.5       0.75         0.9
VVH 0.05750266 0.05105266 0.03939040 0.02043560 0.008623710
LP  0.07291635 0.06512953 0.04848644 0.02243517 0.008918631
ST  0.07914994 0.07054945 0.05135760 0.02444144 0.009375694
DVR 0.06685906 0.05779821 0.04432197 0.02032677 0.008187982
> results$MSE_sd
             0.2         0.25          0.5         0.75          0.9
VVH 0.0003716503 0.0003610370 0.0004428434 0.0005202756 0.0005685282
LP  0.0004948564 0.0005111907 0.0005937494 0.0005621307 0.0005962048
ST  0.0005454312 0.0006235366 0.0006443538 0.0006042597 0.0006239614
DVR 0.0004519101 0.0004394144 0.0005310419 0.0004899033 0.0004963469
> 
> 
> proc.time()
     user    system   elapsed 
14771.681    59.558 14834.409 
